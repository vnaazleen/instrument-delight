{"ast":null,"code":"import { catchError, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/user-auth.service\";\nimport * as i2 from \"@angular/router\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(userAuthService, router) {\n      this.userAuthService = userAuthService;\n      this.router = router;\n    }\n\n    intercept(req, next) {\n      if (req.headers.get('No-Auth') === 'True') {\n        return next.handle(req.clone());\n      }\n\n      const token = this.userAuthService.getToken();\n      req = this.addToken(req, token);\n      return next.handle(req).pipe(catchError(err => {\n        console.log(err.status);\n\n        if (err.status === 401) {\n          this.router.navigate(['/login']);\n        } else if (err.status === 403) {\n          alert(\"forbidden\");\n        }\n\n        return throwError(\"Something is wrong\");\n      }));\n    }\n\n    addToken(request, token) {\n      return request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n\n  }\n\n  AuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.UserAuthService), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n  return AuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}